{"version":3,"sources":["redux/ducks/counter.js","components/Counter.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["INCREMENT","DECREMENT","initialState","count","Counter","dispatch","useDispatch","counter","useSelector","state","className","type","onClick","App","store","createStore","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"uOAAMA,EAAY,sCACZC,EAAY,sCAEZC,EAAe,CACnBC,MAAO,G,OCyBMC,EA1BC,WACd,IAAMC,EAAWC,cACXC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMN,SAC7C,OACE,sBAAKO,UAAU,uBAAf,UACE,oBAAGA,UAAU,YAAb,oBAAiCH,KACjC,gCACE,wBACEI,KAAK,SACLD,UAAU,uBACVE,QAAS,kBAAMP,EDKO,CAC9BM,KAAMX,KCTA,uBAOA,wBACEW,KAAK,SACLD,UAAU,yBACVE,QAAS,kBAAMP,EDEO,CAC9BM,KAAMV,KCNA,8BCOOY,EApBH,kBACV,sBAAMH,UAAU,0EAAhB,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,kCAAf,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,wBAAd,gCACA,oBAAGA,UAAU,OAAb,sNAGwC,+CAHxC,gDAIkB,6CAJlB,6BAImE,IACjE,iDALF,4BAOA,cAAC,EAAD,c,QCdJI,EAAQC,aHIC,WAAmC,IAAlCN,EAAiC,uDAAzBP,EAAcc,EAAW,uCAC/C,OAAQA,EAAOL,MACb,KAAKX,EACH,OAAO,2BAAKS,GAAZ,IAAmBN,MAAOM,EAAMN,MAAQ,IAC1C,KAAKF,EACH,OAAO,2BAAKQ,GAAZ,IAAmBN,MAAOM,EAAMN,MAAQ,IAC1C,QACE,OAAOM,MGTEK,ICOAG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUd,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAQe,SAAUC,qBAAlB,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.85c254eb.chunk.js","sourcesContent":["const INCREMENT = 'react-redux-setup/counter/increment';\nconst DECREMENT = 'react-redux-setup/counter/decrement';\n\nconst initialState = {\n  count: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, count: state.count + 1 };\n    case DECREMENT:\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nexport const increment = () => ({\n  type: INCREMENT,\n});\n\nexport const decrement = () => ({\n  type: DECREMENT,\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { decrement, increment } from '../redux/ducks/counter';\n\nconst Counter = () => {\n  const dispatch = useDispatch();\n  const counter = useSelector((state) => state.count);\n  return (\n    <div className=\"row mx-0 text-center\">\n      <p className=\"lead mb-1\">Count: {counter}</p>\n      <div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary mx-1\"\n          onClick={() => dispatch(increment())}\n        >\n          Increment\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary mx-2\"\n          onClick={() => dispatch(decrement())}\n        >\n          Decrement\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\n\nconst App = () => (\n  <main className=\"bg-dark text-white min-vh-100 d-flex flex-column justify-content-center\">\n    <div className=\"container-md\">\n      <div className=\"row mx-0 justify-content-center\">\n        <div className=\"col-md-9\">\n          <h1 className=\"display-2 text-center\">Hello React-Redux!</h1>\n          <p className=\"lead\">\n            This project will allow you to set up React and Redux in any other project in seconds.\n            All you have to do is download this repository&apos;s files, copy and paste them into\n            your other project&apos;s folder, run <code>npm install</code>, and voil√°! Your project\n            is ready to run <code>npm start</code> for development build and{' '}\n            <code>npm run build</code> for production build.\n          </p>\n          <Counter />\n        </div>\n      </div>\n    </div>\n  </main>\n);\n\nexport default App;\n","import { createStore } from 'redux';\nimport reducer from './ducks/counter';\n\nconst store = createStore(reducer);\n\nexport default store;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}